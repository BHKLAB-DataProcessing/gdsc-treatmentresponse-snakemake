from damply import dirs as dmpdirs

configfile: "config/pipeline.yaml"

# CONTAINER = 'docker://ghcr.io/bhklab-dataprocessing/ctrpv2-treatmentresponse-snakemake:latest'
CONTAINER = 'docker://bhklab/pharmacogx:3.13.2'

storage:
    provider="http"

treatmentResponse = config["treatmentResponse"]

rule all:
    input:
        # raws = expand(dmpdirs.RAWDATA / "treatmentResponse" / "{version}_public_raw_data.csv", version=['GDSC1', 'GDSC2']),
        # profiles = expand(dmpdirs.RAWDATA / "treatmentResponse" / "{version}_fitted_dose_response.xlsx", version=['GDSC1', 'GDSC2']),
        tre = expand(
            dmpdirs.RESULTS / "{version}_treatmentResponseExperiment.RDS", 
            version=['GDSC1', 'GDSC2']
            # version=['GDSC1']
        ),

rule download_treatmentResponse:
    input:
        rawdata = lambda wc: storage.http(treatmentResponse[wc.version]["rawdata"]["url"]),
        profiles = lambda wc: storage.http(treatmentResponse[wc.version]["profiles"]["url"]),
    output:
        rawdata = dmpdirs.RAWDATA / "treatmentResponse/{version}_public_raw_data.csv",
        profiles = dmpdirs.RAWDATA / "treatmentResponse/{version}_fitted_dose_response.xlsx",
    log:
        dmpdirs.LOGS / "treatmentResponse/{version}/download_treatmentResponse.log"
    shell:
        """
        mv {input.rawdata} {output.rawdata} && \
        mv {input.profiles} {output.profiles} > {log} 2>&1
        """

rule downloadMetadata:
    input:
        sampleMetadata = storage.http(config["metadata"]["sampleMetadata"]["url"]),
        treatmentMetadata = storage.http(config["metadata"]["treatmentMetadata"]["url"]),
    output:
        sampleMetadata = dmpdirs.METADATA / "raw_sampleMetadata.xlsx",
        treatmentMetadata = dmpdirs.METADATA / "raw_treatmentMetadata.tsv",
    log:
        dmpdirs.LOGS / "treatmentResponse/downloadMetadata.log"
    shell:
        """
        mkdir -p {dmpdirs.METADATA} && \
        mv {input.sampleMetadata} {output.sampleMetadata} && \
        mv {input.treatmentMetadata} {output.treatmentMetadata} > {log} 2>&1
        """


rule preprocessTreatmentResponse:
    input:
        sampleMetadata = dmpdirs.METADATA / "sampleMetadata.tsv",
        treatmentMetadata = dmpdirs.METADATA / "treatmentMetadata.tsv",
        rawdata = dmpdirs.RAWDATA / "treatmentResponse/{version}_public_raw_data.csv",
        profiles = dmpdirs.RAWDATA / "treatmentResponse/{version}_fitted_dose_response.xlsx",
    output:
        preprocessed_raw = dmpdirs.PROCDATA / "preprocessed_treatmentResponse_{version}_raw.csv",
        preprocessed_profiles = dmpdirs.PROCDATA / "preprocessed_treatmentResponse_{version}_profiles.csv",
    log:
        dmpdirs.LOGS / "treatmentResponse/{version}/preprocessTreatmentResponse.log"
    conda:
        "envs/treatmentResponse.yaml"
    script:
        dmpdirs.SCRIPTS / "R" / "preprocessTreatmentResponse.R"


rule buildTreatmentResponseExperiment:
    input:
        preprocessed_raw = dmpdirs.PROCDATA / "preprocessed_treatmentResponse_{version}_raw.csv",
        preprocessed_profiles = dmpdirs.PROCDATA / "preprocessed_treatmentResponse_{version}_profiles.csv",
    output:
        tre = dmpdirs.RESULTS / "{version}_treatmentResponseExperiment.RDS",
    log:
        dmpdirs.LOGS / "treatmentResponse/{version}/buildTreatmentResponseExperiment.log"
    conda:
        "envs/treatmentResponse.yaml"
    script:
        dmpdirs.SCRIPTS / "R" / "buildTreatmentResponseExperiment.R"

rule preprocessMetadata:
    input:
        sampleMetadata = dmpdirs.METADATA / "raw_sampleMetadata.xlsx",
        treatmentMetadata = dmpdirs.METADATA / "raw_treatmentMetadata.tsv",
    output:
        sampleMetadata = dmpdirs.METADATA / "sampleMetadata.tsv",
        treatmentMetadata = dmpdirs.METADATA / "treatmentMetadata.tsv",
    log:
        dmpdirs.LOGS / "treatmentResponse/preprocessMetadata.log"
    conda:
        "envs/treatmentResponse.yaml"
    script:
        dmpdirs.SCRIPTS / "R" / "preprocessMetadata.R"
